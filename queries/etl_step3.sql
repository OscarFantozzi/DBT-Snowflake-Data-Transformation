ALTER SESSION SET QUERY_TAG = 'ETL-STEP-3.1';

-- creating dLocation
CREATE TABLE IF NOT EXISTS dLocation
(
    
    STORE_ID INT PRIMARY KEY,
    ZIP      VARCHAR(50),
    CITY     VARCHAR(50),
    STATE    VARCHAR(50),
    ADDRESS  VARCHAR(100)

);

TRUNCATE TABLE dLocation;

INSERT INTO dLocation
SELECT
    DISTINCT(STOREID),
    ZIP,
    CITY,      
    STATE,
    ADRESS
FROM SALES_STAGING.PUBLIC.PRODUCT_SALES_PERFORMANCE_STAGING
ORDER BY
    STOREID ASC;


-- creating dProduct
CREATE TABLE IF NOT EXISTS dProduct
(
    ID_PRODUCT  INT PRIMARY KEY,
    SKU         VARCHAR(250),
    TITLE       VARCHAR(250),
    BRAND       VARCHAR(250)
);

TRUNCATE TABLE dProduct;


INSERT INTO dProduct
SELECT
    ROW_NUMBER() OVER( ORDER BY SKU,TITLE,BRAND ),
    SKU,
    TITLE,
    BRAND

FROM SALES_STAGING.PUBLIC.PRODUCT_SALES_PERFORMANCE_STAGING
GROUP BY
    SKU,
    TITLE,
    BRAND;




-- creating sales channel
CREATE TABLE IF NOT EXISTS dSalesChannel
(
    ID_SALES_CHANNEL INT       PRIMARY KEY,
    STORE_TYPE       VARCHAR(50)

);

TRUNCATE TABLE dSalesChannel;

INSERT INTO dSalesChannel
WITH dSalesChannel AS
(
    SELECT
        DISTINCT(STORE_TYPE)
    FROM SALES_STAGING.PUBLIC.PRODUCT_SALES_PERFORMANCE_STAGING
)
SELECT
    ROW_NUMBER() OVER( ORDER BY STORE_TYPE ASC ),
    store_type
FROM dSalesChannel;
    
-- creating fact table
CREATE TABLE IF NOT EXISTS fSales
(
    SKU              INT,
    STORE_ID         INT,
    ID_PRODUCT       INT,
    ID_SALES_CHANNEL INT,
    DATE             DATE,
    QUANTITY         INT,
    TOTAL_SALES      FLOAT
);

TRUNCATE TABLE fSales;

INSERT INTO fSales
SELECT 
    A.SKU,
    A.STOREID,
    C.ID_PRODUCT,
    B.ID_SALES_CHANNEL,
    A.DATE,
    A.SALES       AS QUANTITY,
    A.REVENUEUSD  AS TOTAL_SALES
    
    
FROM 
SALES_STAGING.PUBLIC.PRODUCT_SALES_PERFORMANCE_STAGING A
INNER JOIN
SALES_DW.PUBLIC.DSALESCHANNEL B ON A.STORE_TYPE = B.STORE_TYPE
INNER JOIN
SALES_DW.PUBLIC.DPRODUCT      C ON A.SKU = C.SKU AND A.TITLE = C.TITLE AND A.BRAND = C.BRAND;


-- creating dCalendar
CREATE TABLE IF NOT EXISTS dCalendar
(
    DATE DATE,
    YEAR INT,
    MONTH  INT,
    DAY    INT



);

TRUNCATE TABLE dCalendar;


INSERT INTO dCalendar
SELECT
    DISTINCT(DATE),
    YEAR,
    MONTH,
    DAY
FROM SALES_STAGING.PUBLIC.PRODUCT_SALES_PERFORMANCE_STAGING;

CREATE VIEW IF NOT EXISTS  VW_TOTAL_SALES_BY_CHANNEL AS

-- 1 What were the total sales of each product by sales channel (ONLINE/OFFLINE) for each store in September 2024?
SELECT
    B.ID_PRODUCT,
    C.STORE_TYPE,
    SUM(A.TOTAL_SALES) AS TOTAL_SALES
FROM SALES_DW.PUBLIC.FSALES A
INNER JOIN
SALES_DW.PUBLIC.DPRODUCT    B ON A.ID_PRODUCT = B.ID_PRODUCT
INNER JOIN
SALES_DW.PUBLIC.DSALESCHANNEL C ON A.ID_SALES_CHANNEL = C.ID_SALES_CHANNEL
GROUP BY
    B.ID_PRODUCT,
    C.STORE_TYPE
ORDER BY
    B.ID_PRODUCT;


CREATE VIEW IF NOT EXISTS  VW_10_BEST_SELLING_PRODCUTS AS
-- 2 What are the 10 best-selling products in September 2024 by state and city, and what was the total sales for each location?
SELECT
    *
FROM
(
    SELECT
        B.STATE,
        CITY,
        C.ID_PRODUCT,
        SUM(A.TOTAL_SALES),
        DENSE_RANK() OVER( PARTITION BY B.STATE, B.CITY ORDER BY  SUM(A.TOTAL_SALES) DESC) AS RANKING
    FROM SALES_DW.PUBLIC.FSALES A
    LEFT JOIN
    SALES_DW.PUBLIC.DLOCATION   B  ON  A.STORE_ID = B.STORE_ID
    LEFT JOIN
    SALES_DW.PUBLIC.DPRODUCT    C ON C.ID_PRODUCT = A.ID_PRODUCT
    GROUP BY
        C.ID_PRODUCT,
        B.STATE,
        B.CITY
    
) AS RankedTable
WHERE
    RANKING <= 10
    ORDER BY
        STATE,
        CITY,
        RANKING;

CREATE VIEW IF NOT EXISTS VW_PERCENT_VARIATION_CHANNEL AS
-- 3 What was the percentage variation in total sales of each product between the ONLINE and OFFLINE channels in September 2024?
WITH SKU_TABLE AS
(
    SELECT
        B.ID_PRODUCT,
        C.STORE_TYPE,
        SUM(A.TOTAL_SALES) AS TOTAL_SALES,
        LAG( SUM(A.TOTAL_SALES) ) OVER( PARTITION BY B.ID_PRODUCT ORDER BY B.ID_PRODUCT,C.STORE_TYPE ) AS previous_sku,
        CASE WHEN 
            C.STORE_TYPE = 'ONLINE' THEN SUM(A.TOTAL_SALES)
        ELSE NULL END AS ACTUAL_ONLINE
    FROM SALES_DW.PUBLIC.FSALES A
    INNER JOIN 
    SALES_DW.PUBLIC.DPRODUCT       B ON A.ID_PRODUCT = B.ID_PRODUCT
    INNER JOIN
    SALES_DW.PUBLIC.DSALESCHANNEL  C ON C.ID_SALES_CHANNEL = A.ID_SALES_CHANNEL
    GROUP BY
        B.ID_PRODUCT,
        C.STORE_TYPE
)
SELECT
    S.ID_PRODUCT,
    S.STORE_TYPE,
    S.TOTAL_SALES,
    ROUND( ( S.ACTUAL_ONLINE - S.PREVIOUS_SKU ) / S.PREVIOUS_SKU * 100 , 2) AS PERCENTAGE_VAR
FROM SKU_TABLE S;


CREATE VIEW IF NOT EXISTS  VW_CUM_SALES_STORES AS
-- 4 What were the total cumulative sales by store, state, and product in September 2024, and how did these sales evolve throughout the month?
SELECT
    A.DATE,
    A.STORE_ID,
    B.STATE,
    C.BRAND,
    A.TOTAL_SALES,
    SUM( A.TOTAL_SALES ) OVER( PARTITION BY A.STORE_ID ORDER BY A.DATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS CUM_SUM
FROM SALES_DW.PUBLIC.FSALES   A
LEFT JOIN
SALES_DW.PUBLIC.DLOCATION     B ON A.STORE_ID = B.STORE_ID
LEFT JOIN
SALES_DW.PUBLIC.DPRODUCT      C ON C.ID_PRODUCT = A.ID_PRODUCT;

CREATE VIEW IF NOT EXISTS VW_AVG_DAILY_SALES AS
--  5 What was the average daily sales per store for each product, based on the sales channel?
SELECT
    A.DATE,
    A.STORE_ID,
    B.STORE_TYPE,
    AVG(A.TOTAL_SALES) AS AVG_SALES
FROM SALES_DW.PUBLIC.FSALES A
INNER JOIN 
SALES_DW.PUBLIC.DSALESCHANNEL B ON A.ID_SALES_CHANNEL = B.ID_SALES_CHANNEL
GROUP BY
    A.DATE,
    A.STORE_ID,
    B.STORE_TYPE
ORDER BY
    DATE,
    STORE_ID


SELECT * FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE QUERY_TAG = 'ETL-STEP-3.1';


